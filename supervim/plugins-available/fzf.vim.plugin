NAME:"fzf.vim"

PATH BEGIN
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
PATH END

DEFAULT:1

CONFIG BEGIN
let g:fzf_command_prefix = 'Fzf'

" options entry can be either a string or a lis
command! -bang -nargs=? -complete=dir FzfFiles
            \ call fzf#vim#files(<q-args>, {'options': ['--layout=reverse',  '--info=inline', '--bind','ctrl-f:preview-page-down','--bind','ctrl-b:preview-page-up','--preview',  '(bat --color=always {} || cat -n {}) 2>/dev/null']}, <bang>0)

command! -bang -nargs=* FzfRg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview({'options':'--layout=reverse --info=inline --delimiter : --nth 4..'}), <bang>0)

command! -bang -nargs=* FzfRgc
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(expand('<cword>')), 1,
  \   fzf#vim#with_preview({'options':'--layout=reverse --info=inline --delimiter : --nth 4..'}), <bang>0)

command! -bang -nargs=* FzfCommands  call fzf#vim#commands(fzf#vim#with_preview({'options':'--layout=reverse --info=inline'}),<bang>0)

nnoremap <leader><leader>f :FzfFiles<CR>
nnoremap <leader><leader>h :FzfHistory:<CR>
nnoremap <leader><leader>m :FzfHistory<CR>
nnoremap <leader><leader>b :FzfBuffers<CR>
nnoremap <leader><leader>w :FzfWindows<CR>
nnoremap <leader><leader>c :FzfCommands<CR>

nnoremap <leader><leader>s :FzfRg<CR>
nnoremap <leader>sc :FzfRgc<CR>

" start fzf in popup window
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
function! TogglePopup()
    if !exists("g:fzf_layout")
        let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
    else
        unlet g:fzf_layout
    endif
endfunction

command! -nargs=0 FzfTogglePopup call TogglePopup()

let g:fzf_action = {
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-s': 'split',
      \ 'ctrl-v': 'vsplit' }
CONFIG END


SCRIPTS BEGIN
#!/bin/bash
if ! command -v bat >/dev/null 2>&1;then
    echo "Need 'bat' command."
fi

if ! command -v fd >/dev/null 2>&1;then
    echo "Need 'fd' command."
fi

if ! command -v rg >/dev/null 2>&1;then
    echo "Need 'rg' command."
fi

SCRIPTS END
