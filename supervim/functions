#!/bin/bash
BREW=brew
if [[ -n $proxy ]];then
    BREW="ALL_PROXY=$proxy brew"
fi
checkCmd(){
    if (($#>0));then
        if ! command -v $1 >/dev/null 2>&1;then
            echo "Need cmd: $1"
            exit 1
        fi
    fi
}

help(){
    echo "Usage: $(basename $0) OPTIONS vim/nvim"
    echo "OPTIONS:"
    echo -e "\t\t-p Using socks5://localhost:1080 proxy"
    echo -e "\t\t-g for vim-go"
    echo -e "\t\t-y for YouCompleteMe"
}

installDependence(){
    #arch
    if command -v pacman >/dev/null 2>&1;then
        archApps="linux-headers clang neovim vim cmake python boost python-pip fontconfig ctags curl"#go go-tools 
        echo "pacman update..."
        if (($EUID!=0));then
            sudo pacman -Syu --noconfirm >/dev/null #2>&1
        else
            pacman -Syu --noconfirm >/dev/null #2>&1
        fi
        for tool in ${archApps};do
            echo "Install $tool..."
            if (($EUID!=0));then
                sudo pacman -S $tool --noconfirm --needed >/dev/null #2>&1
            else
                pacman -S $tool --noconfirm --needed >/dev/null #2>&1
            fi
        done
    fi

    #fedora
    if command -v dnf >/dev/null 2>&1;then
        fedoraApps="kernel-devel vim clang python-devel python-pip python3-devel python3-pip cmake boost-devel ncurses-devel curl"#golang golang-godoc
        echo "dnf update..."
        if (($EUID!=0));then
            sudo dnf update -y >/dev/null #2>&1
        else
            dnf update -y >/dev/null #2>&1
        fi
        echo "dnf install dev tools..."
        if (($EUID!=0));then
            sudo dnf groupinstall "development tools" -y >/dev/null #2>&1
        else
            dnf groupinstall "development tools" -y >/dev/null #2>&1
        fi
        for tool in ${fedoraApps};do
            echo "Install $tool..."
            if (($EUID!=0));then
                sudo dnf install $tool -y >/dev/null #2>&1
            else
                dnf install $tool -y >/dev/null #2>&1
            fi
        done
    fi

    #ubuntu debian
    if command -v apt-get >/dev/null 2>&1;then
        ubuntuApps="build-essential vim vim-gtk cmake clang python-apt python-dev python-pip python3-dev python3-pip libboost-all-dev ncurses-dev curl" #golang golang-golang-x-tools
        echo "apt-get update..."
        if (($EUID!=0));then
            sudo apt-get update -y >/dev/null
        else
            apt-get update -y >/dev/null
        fi
        for tool in ${ubuntuApps};do
            echo "Install $tool..."
            if (($EUID!=0));then
                sudo apt-get install $tool -y >/dev/null
            else
                apt-get install $tool -y >/dev/null
            fi
        done
    fi
    if command -v brew >/dev/null 2>&1;then
        apps="cmake boost neovim vim python3 gnu-sed"
        for app in $apps;do
            if ! brew list $app>/dev/null 2>&1;then
                echo "Install $app..."
                $BREW install $app
            fi
        done
        if ! brew list grep >/dev/null 2>&1;then
            echo "Install grep"
            $BREW tap homebrew/dupes;
            $BREW install grep
        fi
    fi
    if ! command -v go >/dev/null 2>&1;then
        echo "Install golang manaually..."
        if (($EUID!=0));then
            sudo /bin/bash ../golang/installGo.sh
        else
            /bin/bash ../golang/installGo.sh
        fi
    fi
}


#安装airline需要用的字体
installFont(){
    case $(uname) in
        "Linux")
            if fc-list | grep -iq Powerline;then
                return
            fi

            if [ ! -d ~/.local/share/fonts ];then
                mkdir -pv ~/.local/share/fonts
            fi
            cp ./fonts/PowerlineSymbols.otf ~/.local/share/fonts
            cp ./fonts/Droid\ Sans\ Mono\ for\ Powerline\ Nerd\ Font\ Complete.otf ~/.local/share/fonts
            fc-cache -vf ~/.local/share/fonts

            if [ ! -d ~/.config/fontconfig/conf.d ];then
                mkdir -pv ~/.config/fontconfig/conf.d
            fi
            cp ./fonts/10-powerline-symbols.conf ~/.config/fontconfig/conf.d
            ;;
        "Darwin")
            command -v brew >/dev/null 2>&1 || { echo "Need install homebrew first!"; exit 1; }
            if ! brew cask list font-hack-nerd-font>/dev/null 2>&1;then
                $BREW tap caskroom/fonts
                $BREW cask install font-hack-nerd-font
            fi
            echo "set Knack nerd font in iterm"
            ;;
        MINGW32*)
            echo "Please install nerd font manually."
            ;;
        *)
            echo "Unknown OS,install font failed!" >& 2
            ;;
    esac
}

installBasic(){
    installDependence
    checkCmd curl
    installFont

    uninstall

    mkdir -pv $root/autoload
    mkdir -pv $root/plugins

    #copy color scheme
    cp -r colors $root
    #copy ftplugin
    cp -r ftplugin $root

    echo  "Downloading vim-plug from github..."
    $CURL -fLo $root/autoload/plug.vim --create-dirs \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim || { echo "download vim-plug failed.";uninstall; exit 1; }

    # if [[ "$whichVim" == "nvim" ]];then
        # if ! command -v nvim;then
            # if [[ -n "$proxy" ]];then
                # echo "Using proxy: $proxy to install neovim"
                # ALL_PROXY="$proxy" brew install neovim
            # else
                # brew install neovim
            # fi
        # fi
        # if [ -n "$proxy" ];then
        #     echo "Using proxy 127.0.0.1:8118 to install pip and neovim"
        #     sudo -H pip --proxy 127.0.0.1:8118 install --upgrade pip || { echo "pip install failed."; uninstall; exit 1; }
        #     sudo -H pip --proxy 127.0.0.1:8118 install --upgrade neovim || { echo "pip install neovim failed."; uninstall; exit 1; }
        # else
        #     sudo -H -E pip install --upgrade pip
        #     sudo -H -E pip install --upgrade neovim
        # fi
    # fi

    cp  init.vim $cfg
    $whichVim +PlugInstall +qall
}

uninstall(){
    echo "uninstall.."
    rm -rf $root
    rm -f $cfg
}
